delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---------------------------
# 1. Tendance générale des notes
# ---------------------------
# Chargement des données
df <- read_delim("../fichiercsv/grouvee_2024_games.csv", delim = ";", locale = locale(encoding = "Latin1"), show_col_types = FALSE)
# Nettoyage : convertir les virgules en points puis transformer en numérique
df$`Note Moyenne` <- as.numeric(gsub(",", ".", df$`Note Moyenne`))
# Filtrer uniquement les jeux notés (note > 0)
df_notes <- df %>% filter(`Note Moyenne` > 0)
# Courbe de densité des notes
ggplot(df_notes, aes(x = `Note Moyenne`)) +
geom_density(fill = "orange", alpha = 0.5, color = "black") +
labs(title = "Courbe de densité des notes moyennes",
x = "Note Moyenne", y = "Densité") +
theme_minimal()
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---------------------------
# 1. Tendance générale des notes
# ---------------------------
# Chargement des données
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# Vérification (facultatif mais conseillé)
str(df$`Note Moyenne`)
summary(df$`Note Moyenne`)
ggplot(df_notes, aes(x = `Note Moyenne`)) +
geom_density(fill = "orange", alpha = 0.5, color = "black") +
labs(title = "Courbe de densité des notes moyennes",
x = "Note Moyenne", y = "Densité") +
theme_minimal()
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_notes, aes(x = `Note Moyenne`)) +
geom_density(fill = "orange", alpha = 0.5, color = "black") +
labs(title = "Courbe de densité des notes moyennes",
x = "Note Moyenne", y = "Densité") +
theme_minimal()
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_genre <- data %>%
separate_rows(Genres, sep = ",") %>%
mutate(Genres = trimws(Genres)) %>%
filter(Genres != "")
data_genre %>%
count(Genres, sort = TRUE) %>%
ggplot(aes(x = reorder(Genres, n), y = n)) +
geom_bar(stat = "identity", fill = "orchid") +
coord_flip() +
labs(title = "Répartition des jeux par Genre", x = "Genre", y = "Nombre de jeux") +
theme_minimal()
# Chargement des données
df<-read_delim("../fichiercsv/grouvee_2024_games.csv", delim = ";", locale = locale(encoding="Latin1"), show_col_types = FALSE)
# Conversion explicite de la colonne Note Moyenne en numérique
df$Note Moyenne<-as.numeric(df$`Note Moyenne`)
# Chargement des données
df<-read_delim("../fichiercsv/grouvee_2024_games.csv", delim = ";", locale = locale(encoding="Latin1"), show_col_types = FALSE)
# Conversion explicite de la colonne Note Moyenne en numérique
df$`Note Moyenne`<-as.numeric(df$`Note Moyenne`)
# Aperçu rapide
glimpse(df)
# ---------------------------
# 1. Tendance générale des notes
# ---------------------------
# Chargement des données
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# Vérification (facultatif mais conseillé)
str(df$`Note Moyenne`)
summary(df$`Note Moyenne`)
ggplot(df_notes, aes(x = `Note Moyenne`)) +
geom_density(fill = "orange", alpha = 0.5, color = "black") +
labs(title = "Courbe de densité des notes moyennes",
x = "Note Moyenne", y = "Densité") +
theme_minimal()
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "             Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chargement des données en forçant Note Moyenne comme texte
df <- read_delim("../fichiercsv/grouvee_2024_games.csv",
delim = ";",
locale = locale(encoding = "Latin1"),
col_types = cols(`Note Moyenne` = col_character()))
# Nettoyage : transformer les virgules en points et convertir en numérique
df$`Note Moyenne` <- gsub(",", ".", df$`Note Moyenne`)           # Remplacer la virgule par un point
df$`Note Moyenne` <- as.numeric(df$`Note Moyenne`)               # Conversion en numérique
# 3. Afficher le jitter (notes entre 0 et 5 normalement)
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "darkblue") +
labs(title = "                 Répartition des notes individuelles par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ---------------------------
# 9. Régression linéaire
# ---------------------------
df_reg<-df %>%
filter(`Note Moyenne` > 0 & !is.na(Plateformes)) %>%
mutate(nb_plateformes = str_count(Plateformes, ",") + 1)
modele<-lm(`Note Moyenne` ~ nb_plateformes, data = df_reg)
summary(modele)
# Graphique
ggplot(df_reg, aes(x = nb_plateformes, y = `Note Moyenne`)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Régression : Note Moyenne vs Nombre de plateformes") +
theme_minimal()
# ---------------------------
# 9. Régression linéaire
# ---------------------------
df_reg<-df %>%
filter(`Note Moyenne` > 0 & !is.na(Plateformes)) %>%
mutate(nb_plateformes = str_count(Plateformes, ",") + 1)
# Graphique
ggplot(df_reg, aes(x = nb_plateformes, y = `Note Moyenne`)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Régression : Note Moyenne vs Nombre de plateformes") +
theme_minimal()
# 🔹 Charger le fichier (en adaptant le chemin si besoin)
df <- read_csv("../fichiercsv/grouvee_2024_games.csv", locale = locale(encoding = "UTF-8"))
# Chargement des packages
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
# 🔹 Charger le fichier (en adaptant le chemin si besoin)
df <- read_csv("../fichiercsv/grouvee_2024_games.csv", locale = locale(encoding = "UTF-8"))
setwd("~/SD_SM4/GROUVEE/grouvee-2024-analysis/progR")
# 🔹 Charger le fichier (en adaptant le chemin si besoin)
df <- read_csv("../fichiercsv/grouvee_2024_games.csv", locale = locale(encoding = "UTF-8"))
# 🔹 Nettoyage : enlever les NA dans Plateformes, et séparer les plateformes multiples
df_clean <- df %>%
filter(!is.na(Plateformes)) %>%
separate_rows(Plateformes, sep = ",\\s*")  # Sépare en lignes
# 🔹 Filtrage des notes valides (> 0)
df_clean$`Note Moyenne` <- as.numeric(df_clean$`Note Moyenne`)
# 🔹 Charger le fichier (en adaptant le chemin si besoin)
df <- read_csv("../fichiercsv/grouvee_2024_games.csv", locale = locale(encoding = "UTF-8"))
# 🔹 Nettoyage : enlever les NA dans Plateformes, et séparer les plateformes multiples
df_clean <- df %>%
filter(!is.na(Plateformes)) %>%
separate_rows(Plateformes, sep = ",\\s*")  # Sépare en lignes
# 🔹 Filtrage des notes valides (> 0)
df_clean$`Note Moyenne` <- as.numeric(df_clean$`Note Moyenne`)
df_clean_valid <- df_clean %>% filter(`Note Moyenne` > 0)
# ─────────────────────────────────────────────────────────────
# 📊 1. Histogramme : Nombre de jeux par plateforme
ggplot(df_clean, aes(x = Plateformes)) +
geom_bar(fill = "steelblue") +
labs(title = "                 Nombre de jeux par plateforme",
x = "Plateforme", y = "Nombre de jeux") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_clean, aes(x = Plateformes)) +
geom_bar(fill = "steelblue") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 3) +  # Ajout des étiquettes
labs(title = "                 Nombre de jeux par plateforme",
x = "Plateforme", y = "Nombre de jeux") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ─────────────────────────────────────────────────────────────
# 📊 2. Moyenne des notes par plateforme
df_avg <- df_clean_valid %>%
group_by(Plateformes) %>%
summarise(Note_Moyenne = round(mean(`Note Moyenne`, na.rm = TRUE), 2),
n_jeux = n()) %>%
arrange(desc(Note_Moyenne))
ggplot(df_avg, aes(x = reorder(Plateformes, -Note_Moyenne), y = Note_Moyenne)) +
geom_col(fill = "darkorange") +
geom_text(aes(label = Note_Moyenne), vjust = -0.3, size = 3.5) +
labs(title = "Note moyenne des jeux par plateforme",
x = "Plateforme", y = "Note moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(stringr)
# Compter le nombre de plateformes par jeu
df$nb_plateformes <- str_count(df$Plateformes, ",") + 1
# Filtrer les jeux avec une note > 0
df_filtered <- df %>%
filter(`Note Moyenne` > 0)
# Nuage de points
ggplot(df_filtered, aes(x = nb_plateformes, y = `Note Moyenne`)) +
geom_point(color = "steelblue", alpha = 0.6, size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "        Note moyenne vs Nombre de plateformes",
x = "Nombre de plateformes",
y = "Note Moyenne") +
theme_minimal()
# Nuage de points
ggplot(df_filtered, aes(x = nb_plateformes, y = `Note Moyenne`)) +
geom_point(color = "steelblue", alpha = 0.6, size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(title = "        Note moyenne vs Nombre de plateformes",
x = "Nombre de plateformes",
y = "Note Moyenne") +
theme_minimal()
library(tidyverse)
# Séparer les plateformes multiples
df_platforms <- df %>%
separate_rows(Plateformes, sep = ",\\s*") %>%
filter(!is.na(Plateformes), Plateformes != "")
# Compter les jeux par plateforme
platform_counts <- df_platforms %>%
count(Plateformes, name = "Nombre_Jeux") %>%
arrange(desc(Nombre_Jeux))
# Créer le graphique
ggplot(platform_counts, aes(x = reorder(Plateformes, Nombre_Jeux), y = Nombre_Jeux)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Nombre_Jeux), vjust = -0.5, size = 3) +  # ➕ Ajout des étiquettes
labs(title = "                                  Nombre de jeux par plateforme",
x = "Plateforme", y = "Nombre de jeux") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#--------------------------------------------
library(ggplot2)
library(dplyr)
library(tidyr)
df_genres <- df_clean %>%
filter(!is.na(Genres)) %>%
separate_rows(Genres, sep = ",\\s*") %>%
group_by(Genres) %>%
summarise(Nombre_jeux = n()) %>%
arrange(desc(Nombre_jeux)) %>%
mutate(pct = round(Nombre_jeux / sum(Nombre_jeux) * 100, 1),
label = paste0(Genres, " (", pct, "%)"))
ggplot(df_genres, aes(x = "", y = Nombre_jeux, fill = Genres)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 3) +
labs(title = "Répartition des jeux par genre") +
theme_void()
ggplot(df_genres, aes(x = reorder(Genres, Nombre_jeux), y = Nombre_jeux)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = Nombre_jeux), hjust = -0.1, size = 3.5) +
coord_flip() +
labs(title = "Nombre de jeux par genre", x = "Genre", y = "Nombre de jeux") +
theme_minimal()
# Assurez-vous d'avoir le package
#install.packages("treemapify")  # à faire une seule fois si pas encore installé
library(treemapify)
library(ggplot2)
library(dplyr)
library(tidyr)
# Charger vos données (adapter le chemin si besoin)
df <- read.csv("grouvee_2024_games.csv", sep = ";", encoding = "UTF-8")
# Nettoyage et préparation des genres
df_genres <- df %>%
filter(!is.na(Genres) & Genres != "") %>%
separate_rows(Genres, sep = ",\\s*") %>%
group_by(Genres) %>%
summarise(Nombre_jeux = n(), .groups = "drop") %>%
arrange(desc(Nombre_jeux))
# Treemap
ggplot(df_genres, aes(area = Nombre_jeux, fill = Genres, label = paste0(Genres, "\n", Nombre_jeux))) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre", grow = TRUE) +
labs(title = "Répartition des jeux par genre (Treemap)") +
theme_minimal()
# Treemap
ggplot(df_genres, aes(area = Nombre_jeux, fill = Genres, label = paste0(Genres, "\n", Nombre_jeux))) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre", grow = TRUE) +
labs(title = "Répartition des jeux par genre (Treemap)") +
theme_minimal()
#-----------------------------------------------------#
# Analyse de la tendance générale des notes
#1. Histogramme des notes
ggplot(df_clean, aes(x = as.numeric(`Note Moyenne`))) +
geom_histogram(binwidth = 0.1, fill = "steelblue", color = "white") +
labs(title = "       Distribution des notes moyennes des jeux",
x = "Note Moyenne", y = "Nombre de jeux") +
theme_minimal()
#2. Boxplot global
ggplot(df_clean, aes(y = as.numeric(`Note Moyenne`))) +
geom_boxplot(fill = "lightblue") +
labs(title = "                        Répartition globale des notes moyennes",
y = "Note Moyenne") +
theme_minimal()
#3. Courbe de densité
ggplot(df_clean, aes(x = as.numeric(`Note Moyenne`))) +
geom_density(fill = "orange", alpha = 0.5) +
labs(title = "              Courbe de densité des notes moyennes", x = "Note Moyenne", y="Densité") +
theme_minimal()
#3. Courbe de densité
ggplot(df_clean, aes(x = as.numeric(`Note Moyenne`))) +
geom_density(fill = "orange", alpha = 0.5) +
labs(title = "              Courbe de densité des notes moyennes", x = "Note Moyenne", y="Densité") +
theme_minimal()
summary(df_clean$`Note Moyenne`)
sd(df_clean$`Note Moyenne`, na.rm = TRUE)
# Nettoyage : on ne garde que les jeux ayant une note
df_notes <- df_clean %>%
filter(`Note Moyenne` > 0 & !is.na(Plateformes))
# Séparer les plateformes multiples
df_notes_sep <- df_notes %>%
separate_rows(Plateformes, sep = ",\\s*")  # Sépare par virgule + espace
# Calcul de la moyenne par plateforme
df_notes_platform <- df_notes_sep %>%
group_by(Plateformes) %>%
summarise(Note_Moyenne = mean(`Note Moyenne`, na.rm = TRUE),
Nombre_jeux = n()) %>%
arrange(desc(Note_Moyenne))
#Graphique 1 : Moyenne des notes par plateforme
ggplot(df_notes_platform, aes(x = reorder(Plateformes, Note_Moyenne), y = Note_Moyenne)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(Note_Moyenne, 2)), vjust = -0.3, size = 3) +
labs(title = "Note moyenne des jeux par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_notes_sep, aes(x = Plateformes, y = `Note Moyenne`)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Variabilité des notes moyennes par plateforme",
x = "Plateforme", y = "Note Moyenne") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggrepel)
library(ggrepel)
library(ggrepel)
# Chargement des bibliothèques nécessaires
install.packages("ggrepel")
install.packages("ggrepel")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(lubridate)
data <- read.csv("grouvee_2024_games.csv", sep = ";", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Conversion de la colonne "Date de sortie"
# Ici, le format est supposé être comme "Feb 20, 2024"
data$Date.de.sortie <- as.Date(data$Date.de.sortie, format = "%b %d, %Y")
# Création de colonnes pour le mois et le trimestre
data <- data %>%
mutate(
Mois = format(Date.de.sortie, "%b"),
Trimestre = paste0("T", quarters(Date.de.sortie))
)
head(data, 5)
data %>%
filter(!is.na(Date.de.sortie)) %>%
count(Mois) %>%
ggplot(aes(x = Mois, y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Nombre de jeux par mois de sortie en 2024", x = "Mois", y = "Nombre de jeux") +
theme_minimal()
data %>%
mutate(Note.Moyenne = as.numeric(Note.Moyenne)) %>%
ggplot(aes(x = Note.Moyenne)) +
geom_histogram(bins = 10, fill = "darkgreen", color = "white") +
labs(title = "Distribution des notes moyennes", x = "Note Moyenne", y = "Fréquence") +
theme_minimal()
data_genre <- data %>%
separate_rows(Genres, sep = ",") %>%
mutate(Genres = trimws(Genres)) %>%
filter(Genres != "")
data_genre %>%
count(Genres, sort = TRUE) %>%
ggplot(aes(x = reorder(Genres, n), y = n)) +
geom_bar(stat = "identity", fill = "orchid") +
coord_flip() +
labs(title = "Répartition des jeux par Genre", x = "Genre", y = "Nombre de jeux") +
theme_minimal()
# Calcul des KPI
total_games <- nrow(data)
avg_rating <- round(mean(as.numeric(data$Note.Moyenne), na.rm = TRUE), 2)
distinct_franchises <- length(unique(data$Franchise[data$Franchise != ""]))
# Création d'un tableau de KPI
kpi_table <- data.frame(
KPI = c("Total de jeux", "Note moyenne", "Franchises distinctes"),
Valeur = c(total_games, avg_rating, distinct_franchises)
)
# Affichage du tableau avec kable
knitr::kable(kpi_table, caption = "KPI Globaux", format = "html")
knitr::opts_chunk$set(echo = TRUE)
# Chargement des bibliothèques nécessaires
#install.packages("ggrepel")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(treemapify)
library(forcats)
library(scales)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(treemapify)
library(cluster)
library(factoextra)
library(lubridate)
library(reshape2)
library(ggrepel)
# ---------------------------
# 9. Régression linéaire
# ---------------------------
df_reg<-df %>%
filter(`Note Moyenne` > 0 & !is.na(Plateformes)) %>%
mutate(nb_plateformes = str_count(Plateformes, ",") + 1)
# Graphique
ggplot(df_reg, aes(x = nb_plateformes, y = `Note Moyenne`)) +
geom_point(color = "blue", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "          Régression : Note Moyenne vs Nombre de plateformes") +
theme_minimal()
